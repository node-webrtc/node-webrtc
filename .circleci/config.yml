version: 2

aliases:
  npm-version: &npm-version
    run:
      name: npm version
      command: npm version

  lint-javascript: &lint-javascript
    run:
      name: Lint JavaScript
      command: |
        npm run lint

        if [[ "$TARGET_ARCH" != arm* && "$NODE_VERSION" != 6 ]]; then
          cd example
          npm run lint
        fi

  test-javascript: &test-javascript
    run:
      name: Run Unit and Integration Tests
      command: |
        # NOTE(mroberts): We run a reduced set of tests for ARM since some of
        # them fail (and I'm not sure all the reasons why, yet).
        export NODE_VERSION=$(node -v | tr -d '\n')
        if [[ "$TARGET_ARCH" == arm ]]; then
          qemu-arm -L ~/node-webrtc/build/external/libwebrtc/download/src/build/linux/debian_sid_arm-sysroot ~/node-$NODE_VERSION-linux-armv7l/bin/node test/create-offer.js
        elif [[ "$TARGET_ARCH" == arm64 ]]; then
          qemu-aarch64 -L ~/node-webrtc/build/external/libwebrtc/download/src/build/linux/debian_sid_arm64-sysroot ~/node-$NODE_VERSION-linux-arm64/bin/node test/create-offer.js
        else
          # NOTE(mroberts): First run C++ tests, if any.
          node test/cpp.js

          npm test

          if [[ "$NODE_VERSION" != v6* ]]; then
            cd example
            npm test
          fi
        fi

  prepare-for-web-platform-tests: &prepare-for-web-platform-tests
    run:
      name: Setup /etc/hosts for Web Platform Tests (x86_64-only)
      command: |
        if [[ "$TARGET_ARCH" == arm* ]]; then
          echo "Skipping..."
          exit 0
        fi

        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	xn--lve-6lad.not-web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	xn--lve-6lad.web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	xn--n8j6ds53lwwkrqhv28a.not-web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	www1.web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	www2.web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	not-web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	www2.not-web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	www1.not-web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	www.not-web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	www.web-platform.test'
        sudo sh -c 'echo >>/etc/hosts 127.0.0.1	xn--n8j6ds53lwwkrqhv28a.web-platform.test'

  web-platform-tests: &web-platform-tests
    run:
      name: Run Web Platform Tests (x86_64-only)
      command: |
        if [[ "$TARGET_ARCH" == arm* ]]; then
          echo "Skipping..."
          exit 0
        fi

        # NOTE(mroberts): web-platform-tests use syntax incompatible with Node 6.
        if [[ ! $(node -v) =~ "v6" ]]; then
          npm run wpt:init
          npm run wpt:test
        fi

  test-browsers: &test-browsers
    run:
      name: Test Browsers (x86_64-only)
      command: |
        if [[ "$TARGET_ARCH" == arm* ]]; then
          echo "Skipping..."
          exit 0
        fi

        npm run test:browsers

  publish-binary: &publish-binary
    run:
      name: Publish Binary (arm64-, x86_64-only)
      command: |
        if [[ `git show -s --format=%B $CIRCLE_SHA1` == *'[publish binary]'* ]]; then
          npm run publish-binary
        else
          echo "Skipping..."
        fi

  before-restore-cache: &before-restore-cache
    run:
      name: Before restore cache...
      command: |
        if [ -z "$TARGET_ARCH" ]; then
          export TARGET_ARCH=x86_64
        fi

        if [ "$DEBUG" == "true" ]; then
          export CMAKE_BUILD_TYPE=Debug
        else
          export CMAKE_BUILD_TYPE=Release
        fi

        echo >>CACHE_KEY "TARGET_ARCH=$TARGET_ARCH"
        echo >>CACHE_KEY "CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE"

        cat CACHE_KEY

  restore-cache: &restore-cache
    restore_cache:
      key: asset-cache-v1-{{ arch }}-{{ checksum "CACHE_KEY" }}-{{ checksum "CMakeLists.txt" }}

  save-cache: &save-cache
    save_cache:
      key: asset-cache-v1-{{ arch }}-{{ checksum "CACHE_KEY" }}-{{ checksum "CMakeLists.txt" }}
      paths:
        - build/external

  after-save-cache: &after-save-cache
    run:
      name: After save cache...
      command: rm CACHE_KEY

  linux-x86_64: &linux-x86_64
    working_directory: ~/node-webrtc

    docker:
      - image: buildpack-deps:xenial

    steps:
      - run:
          name: Install sudo
          command: |
            apt-get update
            apt-get install -y sudo

      - run:
          name: Install Node
          command: |
            cd ~
            curl -sL https://deb.nodesource.com/setup_$NODE_VERSION.x | sudo -E bash -
            sudo apt-get install -y nodejs

            if [[ "$TARGET_ARCH" == arm* ]]; then
              export NODE_VERSION=$(node -v | tr -d '\n')

              if [ "$TARGET_ARCH" == "arm" ]; then
                export TARGET=armv7l
              else
                export TARGET=arm64
              fi

              wget https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-$TARGET.tar.xz
              tar xf node-$NODE_VERSION-linux-$TARGET.tar.xz
            fi

      - <<: *npm-version

      - run:
          name: Check Compiler Versions
          command: |
            gcc --version
            g++ --version

      - run:
          name: Install CMake
          command: |
            cd ~
            wget https://cmake.org/files/v3.12/cmake-3.12.3-Linux-x86_64.sh
            chmod +x cmake-3.12.3-Linux-x86_64.sh
            sudo ./cmake-3.12.3-Linux-x86_64.sh --skip-license
            sudo ln -s $(pwd)/bin/* /usr/local/bin
            rm cmake-3.12.3-Linux-x86_64.sh

      - run:
          name: Install ARM Tools (ARM-only)
          command: |
            if [[ "$TARGET_ARCH" != arm* ]]; then
              echo "Skipping..."
              exit 0
            fi

            cd ~

            if [ "$TARGET_ARCH" == "arm" ]; then
              wget https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/arm-linux-gnueabihf/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz
              tar xf gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz
              rm gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz
              echo >> $BASH_ENV export ARM_TOOLS_PATH=$(pwd)/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf

              # NOTE(mroberts): This is needed so that the WebRTC build finds the correct ld.gold.
              sudo apt-get install -y g++-arm-linux-gnueabihf
            else
              wget https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/aarch64-linux-gnu/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz
              tar xf gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz
              rm gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz
              echo >> $BASH_ENV export ARM_TOOLS_PATH=$(pwd)/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu

              # NOTE(mroberts): This is needed so that the WebRTC build finds the correct ld.gold.
              sudo apt-get install -y g++-aarch64-linux-gnu
            fi

      - checkout

      - <<: *before-restore-cache

      - <<: *restore-cache

      - run:
          name: npm install
          command: |
            # NOTE(mroberts): We have to reduce PARALLELISM during the build;
            # otherwise, we run out of memory.
            export PARALLELISM=2

            # NOTE(mroberts): This fixes up some odd behavior when untar-ing as
            # root.
            export TAR_OPTIONS=--no-same-owner

            # NOTE(mroberts): We aren't interested in downloading pre-built
            # binaries on the CI server.
            export SKIP_DOWNLOAD=true

            # NOTE(mroberts): We need `--unsafe-perm` to run the install script
            # as root.
            npm install --unsafe-perm

            if [[ "$TARGET_ARCH" != arm* && "$NODE_VERSION" != 6 ]]; then
              npm run install-example
            fi

      - <<: *save-cache

      - <<: *lint-javascript

      - run:
          name: Lint C++
          command: |
            if [[ -n "$DEBUG" ]]; then
              cd build
              make check
              make format
              cd ..
            fi
            if [[ -n $(git diff) ]]; then
              echo "You must run make format before submitting a pull request"
              echo ""
              git diff
              exit -1
            fi

      - run:
          name: Install qemu (armv7l-, arm64-only)
          command: |
            if [[ "$TARGET_ARCH" != arm* ]]; then
              echo "Skipping..."
              exit 0
            elif [ "$TARGET_ARCH" == "arm" ]; then
              export TARGET=arm
            else
              export TARGET=aarch64
            fi

            cd ~

            wget https://download.qemu.org/qemu-3.1.0.tar.xz
            tar xf qemu-3.1.0.tar.xz

            cd qemu-3.1.0

            mkdir build
            cd build
            ../configure --disable-bsd-user --disable-guest-agent --disable-strip --disable-werror --disable-gcrypt --disable-debug-info --disable-debug-tcg --disable-tcg-interpreter --enable-attr --disable-brlapi --disable-linux-aio --disable-bzip2 --disable-bluez --disable-cap-ng --disable-curl --disable-fdt --disable-glusterfs --disable-gnutls --disable-nettle --disable-gtk --disable-rdma --disable-libiscsi --disable-vnc-jpeg --disable-kvm --disable-lzo --disable-curses --disable-libnfs --disable-numa --disable-opengl --disable-vnc-png --disable-rbd --disable-vnc-sasl --disable-sdl --disable-seccomp --disable-smartcard --disable-snappy --disable-spice --disable-libssh2 --disable-libusb --disable-usb-redir --disable-vde --disable-vhost-net --disable-virglrenderer --disable-virtfs --disable-vnc --disable-vte --disable-xen --disable-xen-pci-passthrough --disable-xfsctl --enable-linux-user --disable-system --disable-blobs --disable-tools --target-list=$TARGET-linux-user --static --disable-pie
            make -j

            export QEMU=$(find $(pwd) -name qemu-$TARGET)
            echo $QEMU
            echo >> $BASH_ENV export PATH=$(dirname $QEMU):\$PATH

      - <<: *test-javascript

      - <<: *prepare-for-web-platform-tests

      - <<: *web-platform-tests

      - run:
          name: Install Chrome and Firefox (x86_64-only)
          command: |
            if [[ "$TARGET_ARCH" == arm* ]]; then
              echo "Skipping..."
              exit 0
            fi

            sudo apt-get install -y \
              gconf-service \
              libasound2 \
              libatk1.0-0 \
              libatk-bridge2.0-0 \
              libc6 \
              libcairo2 \
              libcups2 \
              libdbus-1-3 \
              libexpat1 \
              libfontconfig1 \
              libgcc1 \
              libgconf-2-4 \
              libgdk-pixbuf2.0-0 \
              libglib2.0-0 \
              libgtk-3-0 \
              libnspr4 \
              libpango-1.0-0 \
              libpangocairo-1.0-0 \
              libstdc++6 \
              libx11-6 \
              libx11-xcb1 \
              libxcb1 \
              libxcomposite1 \
              libxcursor1 \
              libxdamage1 \
              libxext6 \
              libxfixes3 \
              libxi6 \
              libxrandr2 \
              libxrender1 \
              libxss1 \
              libxtst6 \
              ca-certificates \
              fonts-liberation \
              libappindicator1 \
              libnss3 \
              lsb-release \
              xdg-utils \
              wget
            cd node_modules/travis-multirunner
            export BVER=stable
            BROWSER=chrome ./setup.sh
            BROWSER=firefox ./setup.sh
            echo >> $BASH_ENV export CHROME_BIN=$(pwd)/browsers/bin/chrome-$BVER
            echo >> $BASH_ENV export FIREFOX_BIN=$(pwd)/browsers/bin/firefox-$BVER

      - <<: *test-browsers

      - <<: *publish-binary

  darwin-x86_64: &darwin-x86_64
    working_directory: ~/node-webrtc

    macos:
      xcode: "9.0"

    steps:
      - run:
          name: Install nvm
          command: curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash

      - run:
          name: Install Node
          command: |
            # NOTE(mroberts): Needed for macOS.
            if ! [ -x "$(command -v nvm)" ]; then
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

              echo >> $BASH_ENV 'export NVM_DIR="$HOME/.nvm"'
              echo >> $BASH_ENV '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'
            fi

            nvm install $NODE_VERSION
            nvm use $NODE_VERSION
            echo >> $BASH_ENV "nvm use $NODE_VERSION"

      - <<: *npm-version

      - run:
          name: Install CMake
          # NOTE(mroberts): Weird error that says
          #
          #   Error: HOMEBREW_LOGS was not exported!
          #   Please don't worry, you likely hit a bug auto-updating from an old version.
          #   Rerun your command, everything is up-to-date and fine now.
          #
          command: brew install cmake || brew install cmake

      - checkout

      - <<: *before-restore-cache

      - <<: *restore-cache

      - run:
          name: npm install
          command: |
            # NOTE(mroberts): We aren't interested in downloading pre-built
            # binaries on the CI server.
            export SKIP_DOWNLOAD=true

            npm install

            if [[ "$NODE_VERSION" != 6 ]]; then
              npm run install-example
            fi

      - <<: *save-cache

      - <<: *lint-javascript

      - <<: *test-javascript

      - <<: *prepare-for-web-platform-tests

      - <<: *web-platform-tests

      - <<: *publish-binary

jobs:
  linux-x86_64-node-11-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 11
      DEBUG: true

  linux-x86_64-node-11-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 11

  linux-armv7l-node-11-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 11
      DEBUG: true
      TARGET_ARCH: arm

  linux-armv7l-node-11-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 11
      TARGET_ARCH: arm

  linux-arm64-node-11-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 11
      DEBUG: true
      TARGET_ARCH: arm64

  linux-arm64-node-11-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 11
      TARGET_ARCH: arm64

  darwin-x86_64-node-11-debug:
    <<: *darwin-x86_64
    environment:
      NODE_VERSION: 11
      DEBUG: true

  darwin-x86_64-node-11-release:
    <<: *darwin-x86_64
    environment:
      NODE_VERSION: 11

  linux-x86_64-node-10-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 10
      DEBUG: true

  linux-x86_64-node-10-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 10

  linux-armv7l-node-10-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 10
      DEBUG: true
      TARGET_ARCH: arm

  linux-armv7l-node-10-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 10
      TARGET_ARCH: arm

  linux-arm64-node-10-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 10
      DEBUG: true
      TARGET_ARCH: arm64

  linux-arm64-node-10-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 10
      TARGET_ARCH: arm64

  darwin-x86_64-node-10-debug:
    <<: *darwin-x86_64
    environment:
      NODE_VERSION: 10
      DEBUG: true

  darwin-x86_64-node-10-release:
    <<: *darwin-x86_64
    environment:
      NODE_VERSION: 10

  linux-x86_64-node-8-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 8
      DEBUG: true

  linux-x86_64-node-8-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 8

  linux-armv7l-node-8-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 8
      DEBUG: true
      TARGET_ARCH: arm

  linux-armv7l-node-8-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 8
      TARGET_ARCH: arm

  linux-arm64-node-8-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 8
      DEBUG: true
      TARGET_ARCH: arm64

  linux-arm64-node-8-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 8
      TARGET_ARCH: arm64

  darwin-x86_64-node-8-debug:
    <<: *darwin-x86_64
    environment:
      NODE_VERSION: 8
      DEBUG: true

  darwin-x86_64-node-8-release:
    <<: *darwin-x86_64
    environment:
      NODE_VERSION: 8

  linux-x86_64-node-6-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 6
      DEBUG: true

  linux-x86_64-node-6-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 6

  linux-armv7l-node-6-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 6
      DEBUG: true
      TARGET_ARCH: arm

  linux-armv7l-node-6-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 6
      TARGET_ARCH: arm

  linux-arm64-node-6-debug:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 6
      DEBUG: true
      TARGET_ARCH: arm64

  linux-arm64-node-6-release:
    <<: *linux-x86_64
    environment:
      NODE_VERSION: 6
      TARGET_ARCH: arm64

  darwin-x86_64-node-6-debug:
    <<: *darwin-x86_64
    environment:
      NODE_VERSION: 6
      DEBUG: true

  darwin-x86_64-node-6-release:
    <<: *darwin-x86_64
    environment:
      NODE_VERSION: 6

workflows:
  version: 2
  build:
    jobs:
      - linux-x86_64-node-11-debug
      - linux-x86_64-node-11-release
      - linux-armv7l-node-11-debug
      - linux-armv7l-node-11-release
      - linux-arm64-node-11-debug
      - linux-arm64-node-11-release
      - darwin-x86_64-node-11-debug
      - darwin-x86_64-node-11-release
      - linux-x86_64-node-10-debug
      - linux-x86_64-node-10-release
      - linux-armv7l-node-10-debug
      - linux-armv7l-node-10-release
      - linux-arm64-node-10-debug
      - linux-arm64-node-10-release
      - darwin-x86_64-node-10-debug
      - darwin-x86_64-node-10-release
      - linux-x86_64-node-8-debug
      - linux-x86_64-node-8-release
      - linux-armv7l-node-8-debug
      - linux-armv7l-node-8-release
      - linux-arm64-node-8-debug
      - linux-arm64-node-8-release
      - darwin-x86_64-node-8-debug
      - darwin-x86_64-node-8-release
      - linux-x86_64-node-6-debug
      - linux-x86_64-node-6-release
      - linux-armv7l-node-6-debug
      - linux-armv7l-node-6-release
      - linux-arm64-node-6-debug
      - linux-arm64-node-6-release
      - darwin-x86_64-node-6-debug
      - darwin-x86_64-node-6-release
